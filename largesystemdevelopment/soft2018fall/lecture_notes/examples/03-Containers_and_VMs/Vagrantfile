# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "bento/ubuntu-16.04"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  #config.vm.network "forwarded_port", guest: 80, host: 8080
  #config.vm.network "forwarded_port", guest: 8080, host: 8080
  # mongodb port
  #config.vm.network "forwarded_port", guest: 27017, host: 27017

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../../Go", "/go_projects"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.define "webserver", primary: true do |server|
    server.vm.network "private_network", ip: "192.168.20.2"
    server.vm.network "forwarded_port", guest: 8080, host: 8080
    server.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
    end
    server.vm.hostname = "webserver"
    server.vm.provision "shell", inline: <<-SHELL
      echo "Installing Go Lang"
      wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz
      sudo tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz
      rm go1.8.3.linux-amd64.tar.gz

      mkdir -p $HOME/go/src/github.com/HelgeCPH/mywebserver/
      mkdir -p $HOME/go/bin
      mkdir -p $HOME/go/pkg

      echo "export PATH=$PATH:/usr/local/go/bin" >> $HOME/.profile
      echo "export GOPATH=/go_projects" >> $HOME/.profile

      export PATH=$PATH:/usr/local/go/bin
      export GOPATH=/go_projects

      go get gopkg.in/mgo.v2

      cp /vagrant/main.go $HOME/go/src/github.com/HelgeCPH/mywebserver/telbookserver.go
      
      go build $HOME/go/src/github.com/HelgeCPH/mywebserver/telbookserver.go
      ./telbookserver &
    echo "==================================================================="
    echo "=                             DONE                                ="
    echo "==================================================================="
    echo "To log onto the VM:"
    echo "$ vagrant ssh"
    echo "To start the webserver:"
    echo "$ ./telbookserver > /tmp/out.log 2>&1 &"
    echo "Connect in the browser to:"
    echo "$ http://192.168.20.2:8080"
    SHELL
  end

  config.vm.define "dbserver", primary: false do |server|
    server.vm.network "private_network", ip: "192.168.20.3"
    server.vm.network "forwarded_port", guest: 8080, host: 8081
    config.vm.network "forwarded_port", guest: 27017, host: 27017
    config.vm.network "forwarded_port", guest: 28017, host: 28017
    server.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
    end
    server.vm.hostname = "dbserver"
    server.vm.provision "shell", inline: <<-SHELL
      echo "Installing MongoDB"
      sudo apt-get -y install mongodb-server
      sudo mkdir -p /data/db
    
      mongo /vagrant/db_setup.js

      sudo sed -i '/bind_ip = / s/127.0.0.1/0.0.0.0/' /etc/mongodb.conf
      sudo service mongodb restart
    SHELL
  end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    sudo apt-get update

    # sudo chmod a+w /etc/environment
    # sudo echo "LC_ALL=\"en_US.UTF-8\"" >> /etc/environment
    # sudo locale-gen UTF-8
  SHELL
end
