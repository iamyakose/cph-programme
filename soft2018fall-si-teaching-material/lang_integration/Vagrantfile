# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "bento/ubuntu-16.04"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./", "/lang_integration"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
  
    # Customize the amount of memory on the VM:
    vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    apt-get update
    sudo sh -c "echo 'LC_ALL=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8' >> /etc/environment"
    echo ". $HOME/.bashrc" >> $HOME/.bash_profile

    sudo apt-get install -y unzip
    sudo apt-get install -y g++
    sudo apt-get install -y swig
    sudo apt-get install -y python-dev
    sudo apt-get install -y ruby-dev
    sudo ln -s /usr/include/x86_64-linux-gnu/ruby-2.3.0/ruby/config.h /usr/include/ruby-2.3.0/ruby/config.h

    echo "Installing Java..."
    sudo apt-get -y install software-properties-common
    sudo add-apt-repository ppa:webupd8team/java
    sudo apt-get -y update
    echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
    sudo apt-get -y install oracle-java8-installer
    sudo update-java-alternatives -s java-8-oracle

    echo "Installing Go..."
    wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz
    echo "export PATH=$PATH:/usr/local/go/bin" >> $HOME/.bash_profile
    echo "export GOPATH=/go_projects" >> $HOME/.bash_profile
    source $HOME/.bash_profile

    wget https://bintray.com/artifact/download/groovy/maven/apache-groovy-binary-2.4.12.zip
    unzip apache-groovy-binary-2.4.12.zip

    echo "export GROOVY_HOME=/home/vagrant/groovy-2.4.12" >> $HOME/.bash_profile
    export GROOVY_HOME=/home/vagrant/groovy-2.4.12
    echo "export PATH=$PATH:$GROOVY_HOME/bin" >> $HOME/.bash_profile
    source $HOME/.bash_profile

    sudo apt-get install -y gnat
    sudo apt-get install -y f2c fort77

    sudo apt-get install -y python-pip
    pip install hy
    sudo apt-get install -y lua5.3 liblua5.3-dev

    # Free Pascal
    # sudo apt-get install fp-compiler
    # sudo apt-get install fp-ide

    # GNU Pascal
    # sudo add-apt-repository ppa:ueter/gpc-3.4
    # sudo apt-get update
    # sudo apt-get install -y gpc-3.4


    curl https://getmic.ro | bash
    sudo mv micro /usr/local/bin/

    wget https://nim-lang.org/download/nim-0.17.2.tar.xz
    tar xvf ./nim-0.17.2.tar.xz
    cd nim-0.17.2/
    sh build.sh
    bin/nim c koch
    ./koch tools

    echo "export PATH=$PATH:/home/vagrant/nim-0.17.2/bin/:/home/vagrant/.nimble/bin" >> $HOME/.bash_profile
    source $HOME/.bash_profile

    # export PATH=:$PATH:/home/vagrant/nim-0.17.2/bin/
    # export PATH=:$PATH:/home/vagrant/.nimble/bin
  SHELL
end
